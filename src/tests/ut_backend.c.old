#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sds.h>
#include <pthreads.h>

#include "mongoose.h"

sds message = NULL, response = NULL;
char connected = 0;
char got_response = 0;

void ev_handle(struct mg_connection* c, int ev, void* ev_data) {
	switch (ev) {
		case MG_EV_WS_OPEN:
			connected = 1;
			break;
		case MG_EV_WS_MSG:
			struct mg_ws_message *wm = (struct mg_ws_message *)ev_data;
			printf("LOL: '%s'\n", wm->data.buf);
			sdsfree(response);
			response = sdsnewlen(wm->data.buf, wm->data.len);
			got_response = 1;
			break;
	}
}

void ut_connect(struct mg_mgr* mgr) {
	connected = 0;
	while (!connected) {
		mg_mgr_poll(mgr, 1000);
	}
}

void ut_send(struct mg_connection* c, char* msgbuf) {
	printf("UT_SEND:   %s\n", msgbuf);
	sdsfree(message);
	message = sdsnew(msgbuf);
	mg_ws_send(c, msgbuf, sdslen(msgbuf), WEBSOCKET_OP_TEXT);
}

void ut_expect(struct mg_mgr* mgr, char* expbuf) {
	printf("UT_EXPECT: %s\n", expbuf);
	got_response = 0;
	while (!got_response) {
		mg_mgr_poll(mgr, 1000);
		printf("POLL\n");
	}
	printf("UT_GOT:    %s\n", response);

	if (strcmp(response, expbuf) == 0)
		return;

	printf("ERROR!\n"); 
	exit(1);
}

int main() {
	struct mg_mgr mgr[16];
	struct mg_connection* c[16];

	for (int i = 0; i < 16; i++)
		mg_mgr_init(&mgr[i]);

	char addr[32];
	for (int i = 0; i < 16; i++) {
		snprintf(addr, sizeof(addr), "http://localhost:6969/ws", 8000);
		c[i] = mg_ws_connect(&mgr[i], addr, ev_handle, NULL, NULL);
		if (c[i] == NULL) {
			printf("CONN ERROR\n");
			return 1;
		}
	}

	ut_connect(&mgr[0]);
	ut_send(c[0], "c_open|User1");
	ut_expect(&mgr[0], "c_open_ok");
	ut_expect(&mgr[0], "c_users|User1");
	//ut_disconnect(c[0]);

	sdsfree(message);
	sdsfree(response);

	return 0;
}
